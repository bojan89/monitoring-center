{
  "name": "MonitoringCenter",
  "tagline": "MonitoringCenter is an easy-to-use, comprehensive framework for programmatically monitoring Java applications.",
  "body": "### Features\r\nBuilt on top of Dropwizard's [Metrics](https://dropwizard.github.io/metrics) library, MonitoringCenter gives you:\r\n* Ability to centrally collect and report on metrics.\r\n* Ability to centrally register, execute, and report on health checks.\r\n* Out of the box metric collection for OS, JVM, and Tomcat statistics, including programmatic access to the collected metrics.\r\n* Out of the box support for instrumentation of collections, maps, caches, executors, and C3P0 data sources.\r\n* Logger-like paradigm for metric collection from anywhere in your Java application.\r\n* Unified, distributed system-ready, naming schema for metrics and health checks.\r\n* Programmatic, file-based, or hybrid framework configuration with support for reloadable parameters.\r\n* Insight into the OS, JVM, network node, application, and servlet container configuration.\r\n\r\n### Documentation\r\nSee [README](https://github.com/centro/monitoring-center/blob/master/README.md) and [Javadoc](https://centro.github.io/monitoring-center/javadoc) for detailed documentation.\r\n\r\n### Why not simply use Dropwizard's Metrics?\r\nWhile Metrics is a great library, it merely provides building blocks for metrics and health checks\r\nwithout a clear path to enterprise integration and roll out. MonitoringCenter aims to provide idioms\r\nand ready-to-use facilities that can right away be employed throughout your Java applications.\r\n\r\nAs we worked on the Centro's Real-Time Bidding systems, we gradually realized that 1) gaining insight into the live\r\napplication is absolutely crucial for decision-making and, later on, that 2) our monitoring code is all\r\nover the place. Bidder's monitoring code consisted of Dropwizard's Metrics registered via a singleton,\r\nlegacy metrics (AtomicLong bundles) owned by multiple services, JSPs, logging statements, a myriad of servlets\r\nfor reporting health checks, system status, build info, and node info. Naming was up to an engineer's mood.\r\nAltogether, a chaos, out of which MonitoringCenter was born.\r\n\r\nMonitoringCenter's ultimate goal is to encapsulate, standardize, and facilitate all monitoring concerns within a\r\nJava application.\r\n\r\n### Is it safe to use? How is performance?\r\nMonitoringCenter has been fully integrated into all of the Centro's Real-Time Bidding components. These components are \r\ncurrently running in production with the library invoked on the critical path millions of times a second.\r\n\r\n### Authors\r\nAlexey Rudkovskiy (alexey.rudkovskiy@centro.net)  \r\nXianli Li (tom.li@centro.net)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}